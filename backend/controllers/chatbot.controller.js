import { getGenerativeModel } from \\\"../services/gemini.js\\\"; // Assuming a generic text model getter\n\n// It's good practice to have a more specific model for chat/NLU if available\n// For now, we use the general model, but you might fine-tune or use a chat-specific one.\nconst model = getGenerativeModel(); \n\nconst processUserCommand = async (req, res) => {\n    const { command, currentPath, availableRoutes } = req.body;\n\n    if (!command || !currentPath || !availableRoutes) {\n        return res.status(400).json({\n            success: false,\n            message: \\\"Missing command, currentPath, or availableRoutes in request body.\\\"\n        });\n    }\n\n    // Constructing a detailed prompt for Gemini\n    const prompt = `\n        You are AI Facely, a friendly, conversational, and highly intelligent AI assistant for the Facely web application. \n        Your primary goal is to help users by:\n        1. Providing concise information about the Facely application (its features, how to use them, etc.).\n        2. Navigating them to different sections of the application upon request.\n\n        Current user context:\n        - The user is currently on this page: ${currentPath}\n        - The user sent this command/query: \\\"${command}\\\"\n\n        Available application routes for navigation (these are the primary sections you can navigate to):\n        ${JSON.stringify(availableRoutes)}\n\n        Your task is to understand the user's command and respond appropriately.\n\n        Response Guidelines:\n        - Analyze the user's command to determine if it's an informational query or a navigation request.\n        - If it's an informational query: Provide a helpful and accurate answer. The reply should be natural and conversational.\n        - If it's a navigation request: \n            - Identify the most relevant route from the \\\"Available application routes\\\".\n            - If a direct match is found (e.g., user says \\\"go to gallery\\\" and \\\"/gallery\\\" is available), use that route.\n            - If the user's request is slightly different but implies a route (e.g., \\\"show my photos\\\" for \\\"/gallery\\\"), map it to the correct route.\n            - If the user asks to go to a parameterized route (e.g., \\\"/group/:groupId\\\") without providing the parameter, you can navigate to the base (e.g., \\\"/dashboard\\\" or a relevant listing page if available) and perhaps mention they can select a specific group there, or ask for more details if appropriate.\n            - Your reply should confirm the navigation action (e.g., \\\"Okay, taking you to the gallery!\\\").\n        - If the command is a simple greeting (e.g., \\\"hello\\\", \\\"hi\\\"), respond with a friendly greeting.\n        - If the command is unclear, or you cannot fulfill the request (e.g., asking about something completely unrelated to Facely or a non-existent feature/route), provide a polite and helpful fallback message. You can suggest what you *can* help with.\n        - Be concise and avoid overly long responses.\n\n        Output Format (VERY IMPORTANT):\n        Your entire response MUST be a single, valid JSON object. Do NOT include any markdown formatting (like \\\`\\\`\\\`json), explanations, or any text outside of this JSON object.\n        \n        - For navigation: \n          { \\\"route\\\": \\\"/path/to/navigate\\\", \\\"reply\\\": \\\"Your confirmation message here.\\\" }\n          (The 'route' value MUST be one of the provided available routes or a logical base path for parameterized routes.)\n        \n        - For informational answers, greetings, or fallback messages (i.e., no navigation):\n          { \\\"reply\\\": \\\"Your informational answer, greeting, or fallback message here.\\\" }\n          (In this case, the JSON object should ONLY contain the 'reply' key.)\n\n        Examples:\n        1. User command: \\\"Go to my profile page\\\"\n           Expected JSON output: { \\\"route\\\": \\\"/profile\\\", \\\"reply\\\": \\\"Sure, heading to your profile!\\\" }\n\n        2. User command: \\\"What can I do in the gallery?\\\"\n           Expected JSON output: { \\\"reply\\\": \\\"In the gallery, you can view, manage, and search for your photos using AI!\\\" }\n        \n        3. User command: \\\"Hello AI Facely\\\"\n           Expected JSON output: { \\\"reply\\\": \\\"Hello there! How can I assist you with Facely today?\\\" }\n\n        4. User command: \\\"How to bake a cake?\\\"\n           Expected JSON output: { \\\"reply\\\": \\\"I can help you with information and navigation within the Facely app. I don\\'t have cake recipes, unfortunately! Is there something in Facely I can help with?\\\" }\n\n        Now, process the user's command: \\\"${command}\\\"\n    `;\n\n    try {\n        const result = await model.generateContent([{ text: prompt }]);\n        const response = await result.response;\n        const rawText = response.text();\n\n        // Attempt to parse the JSON response from Gemini\n        let parsedResponse;\n        try {\n            // Remove potential markdown backticks if Gemini accidentally includes them\n            const cleanText = rawText.replace(/^```json\\n?|\\n?```$/g, \\\'\\\').trim();\n            parsedResponse = JSON.parse(cleanText);\n        } catch (parseError) {\n            console.error(\\\"Gemini response parsing error:\\\", parseError);\n            console.error(\\\"Raw Gemini response text:\\\", rawText);\n            return res.status(500).json({\n                success: false,\n                message: \\\"Failed to understand AI\\'s response. The response was not valid JSON.\\\",\n                details: rawText // Send raw text for debugging on client if needed\n            });\n        }\n\n        // Validate the structure of the parsed response\n        if (!parsedResponse.reply) {\n            console.error(\\\"Invalid AI response structure. Missing \\\'reply\\\'.\\\", parsedResponse);\n            return res.status(500).json({\n                success: false,\n                message: \\\"AI response is missing the required \\\'reply\\\' field.\\\"\n            });\n        }\n\n        if (parsedResponse.route && !availableRoutes.some(ar => parsedResponse.route.startsWith(ar.split(\\\':\\\')[0]))) {\n            console.warn(\\\"AI suggested a route not in availableRoutes or an invalid base for a parameterized route:\\\", parsedResponse.route);\n            // Decide if you want to block this or allow it. For now, let's adjust the response.\n            // parsedResponse.reply = `I found something related to ${parsedResponse.route}, but I can\\'t directly navigate there. Try asking differently or navigating manually.`;\n            // delete parsedResponse.route; // Or let it go through and see if frontend handles it.\n        }\n\n        res.status(200).json({ success: true, ...parsedResponse });\n\n    } catch (error) {\n        console.error(\\\"Error processing command with Gemini:\\\", error);\n        let errorMessage = \\\"An error occurred while communicating with AI Facely.\\\";\n        if (error.message) {\n            errorMessage += `: ${error.message}`;\n        }\n        res.status(500).json({\n            success: false,\n            message: errorMessage\n        });\n    }\n};\n\nexport { processUserCommand }; 